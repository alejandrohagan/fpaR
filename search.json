[{"path":"https://alejandrohagan.github.io/fpaR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 fpaR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alejandro Hagan. Author, maintainer.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hagan (2025). fpaR: Common Business Intelligence Functions FP&work. R package version 0.0.0.9000, https://alejandrohagan.github.io/fpaR/.","code":"@Manual{,   title = {fpaR: Common Business Intelligence Functions for FP&A work},   author = {Alejandro Hagan},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://alejandrohagan.github.io/fpaR/}, }"},{"path":[]},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Common Business Intelligence Functions for FP&A work","text":"fpaR collection business intelligence tools designed simplify common financial planning analysis (FP&) tasks time intelligence calculations, customer, vendor product segmentation, factor/variance analysis. package inspired best practices collection blogs, books, industry research, hands-work experience, consolidating frequently performed business analyses fast, efficient, reusable framework. particular, time intelligence functions heavily inspired PowerBI DAX functions. hood, functions built upon great foundations : dbplyr duckdb lubridate fpaR designed seamlessly work either tibbles modern databases (DuckDB, Snowflake, SQLite, etc) unified syntax. Even working tibbles, functions optimized leverage DuckDB superior speed performance.1 default fpaR function returns lazy DBI object can return tibble dplyr::collect()","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"key-features--benefits","dir":"","previous_headings":"","what":"Key features & benefits","title":"Common Business Intelligence Functions for FP&A work","text":"Unified syntax regardless data tibble database Optimized speed scale data converted local duckdb database scale calculations Instant clarity every function summarizes transformation actions can understand validate functions results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Common Business Intelligence Functions for FP&A work","text":"Install development version fpaR GitHub:","code":"# Install using pak or install.package()  pak::pak(\"alejandrohagan/fpaR\")"},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"what-is-in-fpar","dir":"","previous_headings":"","what":"What is in fpaR?","title":"Common Business Intelligence Functions for FP&A work","text":"3 main categories functions: - Time intelligence (Ready testing feedback) - Segmentation strategies (work progress) - Factor Analysis (work progress)","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"time-intelligence","dir":"","previous_headings":"What is in fpaR?","what":"Time intelligence","title":"Common Business Intelligence Functions for FP&A work","text":"fpaR provides readily available functions time intelligence analysis Year--Year (YoY), Month--Date (MTD), Current Year--Date Previous Year--Date (YoYTD) analysis. functions designed quickly answer common time intelligence related analysis consistent, fast transparent way. Key benefits: Auto-fill missing dates: Ensures missing periods datasets right period comparisons performed Flexible calendar options: Handle comparisons based standard 5-5-4 fiscal calendar accommodate different reporting frameworks Period imbalance indicator: comparing periods dates imbalance, time intelligence functions alert type number period imbalances ensure aware misleading likewise comparisons full list time intelligence functions:","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"time-intelligence-1","dir":"","previous_headings":"How to use fpaR?","what":"Time Intelligence","title":"Common Business Intelligence Functions for FP&A work","text":"execute time intelligence function, return ti class object custom print method explains function summary transformation steps calendar attributes see print method explains function’s actions, details calendar’s attributes, summarizes main transformation steps lists possible next actions return tibble results, pass ti object calculate() using tibble, hood, fpaR converting data duckdb database. data datable, package leverage dbplyr execute calculations. Either case use dplyr::collect() return results local tibble.","code":"sales |>     mtd(.date=order_date,.value = margin,calendar_type = \"standard\") ── Month-to-date ───────────────────────────────────────────────────────────────  Function: `mtd` was executed  ── Description: ──  This creates a daily `cumsum()` of the current month margin from the start of the standard calendar month to the end of the month  ── Calendar: ──  • The calendar aggregated order_date to the day time unit • A standard calendar is created with 0 groups • Calendar ranges from 2021-05-18 to 2024-04-20 • 222 days were missing and replaced with 0 • New date column date, year and month was created from order_date  ── Actions: ──  ✔Aggregate  ✖Shift  ✖Compare  ✖Proportion Of Total  ✖Count Distinct  ── Next Steps: ──  • Use `calculate()` to return the results  ──────────────────────────────────────────────────────────────────────────────── sales |>                                                                    mtd(.date=order_date,.value = margin,calendar_type = \"standard\") |>      calculate() # Source:     SQL [?? x 7] # Database:   DuckDB v1.1.3 [hagan@Linux 6.12.10-76061203-generic:R 4.4.3//tmp/RtmpkvGhnP/file372c865e1f58a] # Ordered by: date     year month date       margin missing_date_indicator mtd_margin    <dbl> <dbl> <date>      <dbl>                  <dbl>      <dbl>  1  2021     8 2021-08-01    0                        1         0   2  2021     8 2021-08-02    0                        1         0   3  2021     8 2021-08-03    0                        1         0   4  2021     8 2021-08-04 2091.                       0      2091.  5  2021     8 2021-08-05  112.                       0      2203.  6  2021     8 2021-08-06   71.2                      0      2274.  7  2021     8 2021-08-07 4406.                       0      6681.  8  2021     8 2021-08-08    0                        1      6681.  9  2021     8 2021-08-09 2044.                       0      8724. 10  2021     8 2021-08-10 6847.                       0     15572. # ℹ more rows # ℹ 1 more variable: days_in_current_period <dbl> sales |>                                                                    mtd(.date=order_date,.value = margin,calendar_type = \"standard\") |>      calculate() |>                                                           dplyr::collect() |>                                                   head(10) # A tibble: 10 × 7     year month date       margin missing_date_indicator mtd_margin    <dbl> <dbl> <date>      <dbl>                  <dbl>      <dbl>  1  2021     8 2021-08-01    0                        1         0   2  2021     8 2021-08-02    0                        1         0   3  2021     8 2021-08-03    0                        1         0   4  2021     8 2021-08-04 2091.                       0      2091.  5  2021     8 2021-08-05  112.                       0      2203.  6  2021     8 2021-08-06   71.2                      0      2274.  7  2021     8 2021-08-07 4406.                       0      6681.  8  2021     8 2021-08-08    0                        1      6681.  9  2021     8 2021-08-09 2044.                       0      8724. 10  2021     8 2021-08-10 6847.                       0     15572. # ℹ 1 more variable: days_in_current_period <dbl>"},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"what-if-you-need-the-analysis-at-the-group-level","dir":"","previous_headings":"How to use fpaR?","what":"what if you need the analysis at the group level?","title":"Common Business Intelligence Functions for FP&A work","text":"Simply pass groups want dplyr::group_by() time intelligence function create custom calendar group level. Take dataset Select groups want group_by() Prints sumamrized instructions actions functions performs calculate year year analysis","code":"sales |>       dplyr::group_by(customer_key,store_key) |>      yoy(.date=order_date,.value = margin,calendar_type = \"standard\") • The calendar aggregated order_date to the year time unit • A standard calendar is created with 2 groups • Calendar ranges from 2021-05-18 to 2024-04-20 • 222 days were missing and replaced with 0 • New date column date and year was created from order_date"},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"why-do-we-need-this-package-when-we-have-lubridate","dir":"","previous_headings":"","what":"Why do we need this package when we have lubridate?","title":"Common Business Intelligence Functions for FP&A work","text":"Lubridate excellent package heavily used package. issue isn’t lubridate rather issues may aware package. Time-based comparisons, Year--Year (YoY), Quarter--Quarter (QoQ), Month--Date (MTD), common tracking business performance. However, come challenges: Many datasets continuous dates, especially data recorded business days active transactions Period imbalances periods (Eg. different number days February vs. January) can create misleading analysis trends analysis may need reference non-standard calendar 5-5-4, 4-4-5, 13 month calendar data may excel sheets, csv databases need inter-operable framework switch data types","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"continuous-dates","dir":"","previous_headings":"Why do we need this package when we have lubridate?","what":"Continuous Dates","title":"Common Business Intelligence Functions for FP&A work","text":"use dplyr::lag() compare Day--Day (DoD) revenue, missing 2024-01-02, 2024-01-04, 2024-01-05 lead incorrect answers trends. correct , fpaR complete calendar group missing periods ensure missing periods calculating trends.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"issue-2","dir":"","previous_headings":"","what":"Issue 2","title":"Common Business Intelligence Functions for FP&A work","text":"TBD","code":"# A tibble: 10 × 5    date        year month pmtd_margin days_in_comparison_period    <date>     <dbl> <dbl>       <dbl>                     <dbl>  1 2022-02-28  2022     2     142668.                        31  2 2022-02-27  2022     2     132202.                        27  3 2022-02-26  2022     2     129436.                        26  4 2022-02-25  2022     2     123449.                        25  5 2022-02-24  2022     2     112772.                        24  6 2022-02-23  2022     2     112085.                        23  7 2022-02-22  2022     2     112085.                        22  8 2022-02-21  2022     2     101241.                        21  9 2022-02-20  2022     2      97958.                        20 10 2022-02-19  2022     2      95431.                        19"},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"issue-3","dir":"","previous_headings":"","what":"Issue 3","title":"Common Business Intelligence Functions for FP&A work","text":"TBD","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"datasets","dir":"","previous_headings":"","what":"Datasets","title":"Common Business Intelligence Functions for FP&A work","text":"package leverages Contoso package analysis. contoso datasets fictional business transaction Contoso toy company helpful business intelligence related analysis active work--progress, feedback, testing, contributions welcome!","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"segmentation-strategies","dir":"","previous_headings":"Future capabilities","what":"Segmentation Strategies","title":"Common Business Intelligence Functions for FP&A work","text":"Provides functions segment categorize data meaningful business categories.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"example-segmentation-methods","dir":"","previous_headings":"Future capabilities > Segmentation Strategies","what":"Example Segmentation Methods:","title":"Common Business Intelligence Functions for FP&A work","text":"ABC Classification – Categorizing products/customers based revenue contribution Cohort Analysis - Categorize data shared time based attribute track time New vs. Returning – Distinguishing first-time buyers repeat customers K-means Clustering – Grouping data points based patterns UMAP (Uniform Manifold Approximation Projection) – Dimensionaltiy reduction clustering","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"factor--variation-analysis","dir":"","previous_headings":"Future capabilities","what":"Factor / Variation Analysis","title":"Common Business Intelligence Functions for FP&A work","text":"Breaks revenue cost changes price, volume, mix effects.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"use-cases","dir":"","previous_headings":"Future capabilities > Factor / Variation Analysis","what":"Use Cases:","title":"Common Business Intelligence Functions for FP&A work","text":"Analyzing revenue growth due price increases vs. increased sales volume Measuring impact product mix changes profitability.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/index.html","id":"additional-references-and-inspirations","dir":"","previous_headings":"","what":"Additional references and inspirations","title":"Common Business Intelligence Functions for FP&A work","text":"PeerChristensen’s Cohort Package","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc.html","id":null,"dir":"Reference","previous_headings":"","what":"ABC classification function — abc","title":"ABC classification function — abc","text":"group variable, abc()  categorize groups make proportion totals according category_values entered function returns segment object prints execution steps actions take categorize data Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ABC classification function — abc","text":"","code":"abc(.data, category_values, .value)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ABC classification function — abc","text":".data tibble dbi object (either grouped ungrouped) category_values vector break points 0 1 .value optional: left blank,abc() use number rows per group categorize, alternatively can pass column name categorize","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ABC classification function — abc","text":"segment object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ABC classification function — abc","text":"function helpful understand groups make proportion cumulative contribution provide .value count transactions per group, provide .value sum() .value per group function creates segment object, pre-processes data components","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ABC classification function — abc","text":"","code":"abc(sales,c(.1,.5,.7,.96,1),.value=margin) #> Error: `abc()` expects a grouped tibble or dbi object. Please use `group_by()` #> to pass a grouped objected"},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify a group by proportion of a variable (A,B,C,...) — abc_fn","title":"Classify a group by proportion of a variable (A,B,C,...) — abc_fn","text":"returns table segment data ,B C segments based custom thresholds","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify a group by proportion of a variable (A,B,C,...) — abc_fn","text":"","code":"abc_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify a group by proportion of a variable (A,B,C,...) — abc_fn","text":"x segment object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/abc_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify a group by proportion of a variable (A,B,C,...) — abc_fn","text":"dbi objection","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd.html","id":null,"dir":"Reference","previous_headings":"","what":"All period-to-date — atd","title":"All period-to-date — atd","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All period-to-date — atd","text":"","code":"atd(.data, .date, .value, calendar_type)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All period-to-date — atd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All period-to-date — atd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"All period-to-date — atd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All period-to-date — atd","text":"","code":"atd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\") #>  #> ── All-to-date ───────────────────────────────────────────────────────────────── #> Function: `atd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` quantity from the earliest date of the standard #> calendar until the last date #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"All-to-date execution function — atd_fn","title":"All-to-date execution function — atd_fn","text":"atd_fn() function called atd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All-to-date execution function — atd_fn","text":"","code":"atd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All-to-date execution function — atd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All-to-date execution function — atd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/atd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"All-to-date execution function — atd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate — calculate","title":"Calculate — calculate","text":"Calculate Calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate — calculate","text":"x segment object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate — calculate","text":"dbi object dbi object","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohort Analysis — cohort","title":"Cohort Analysis — cohort","text":"database remake 'https://github.com/PeerChristensen/cohorts' excellent cohort package combining chort_table_month, cohort_table_year, cohort_table_day single package. Re-written database friendly tested snowflake duckdb databases","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cohort Analysis — cohort","text":"","code":"cohort(   .data,   .date,   .value,   calendar_type,   time_unit = \"month\",   period_label = FALSE )"},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cohort Analysis — cohort","text":".data tibble dbi object .date date column .value id column calendar_type clarify calendar type; 'standard' '554' time_unit want summarize date column 'day', 'week','month','quarter' 'year' period_label want period labels dates c(TRUE,FALSE)","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cohort Analysis — cohort","text":"segment object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cohort Analysis — cohort","text":"group .value column shared time attributes .date column assign member time base cohort based member's first entry .date column cohort generalized time_unit argument selected distinct count cohort member time calculated","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for the cohort segment object — cohort_fn","title":"Internal function for the cohort segment object — cohort_fn","text":"Internal function cohort segment object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for the cohort segment object — cohort_fn","text":"","code":"cohort_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function for the cohort segment object — cohort_fn","text":"x segment object period_label optional label","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/cohort_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function for the cohort segment object — cohort_fn","text":"function","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/complete_calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"complete_calendar — complete_calendar","title":"complete_calendar — complete_calendar","text":"complete_calendar","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/complete_calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"complete_calendar — complete_calendar","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/complete_calendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"complete_calendar — complete_calendar","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/create_calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Calendar Table — create_calendar","title":"Create Calendar Table — create_calendar","text":"create_calendar() summarizes tibble target time unit completes calendar ensure missing days, month, quarter years. grouped tibble passed complete calendar combination group create_calendar() summarizes tibble target time unit completes calendar ensure missing days, month, quarter years. grouped tibble passed complete calendar combination group","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/create_calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Calendar Table — create_calendar","text":"x segment object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/create_calendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Calendar Table — create_calendar","text":"dbi object dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/create_calendar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Calendar Table — create_calendar","text":"internal function make easier ensure data missing dates simplify use time intelligence functions downstream application. want summarize particular group, simply pass tibble dplyr::group_by() argument prior function function make summarize make complete calendar group item. internal function make easier ensure data missing dates simplify use time intelligence functions downstream application. want summarize particular group, simply pass tibble dplyr::group_by() argument prior function function make summarize make complete calendar group item.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/customer.html","id":null,"dir":"Reference","previous_headings":"","what":"Customer dataset — customer","title":"Customer dataset — customer","text":"comprehensive dataset containing customer information including personal details, geographic information, demographics, relevant customer attributes.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/customer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customer dataset — customer","text":"","code":"customer"},{"path":"https://alejandrohagan.github.io/fpaR/reference/customer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Customer dataset — customer","text":"data frame rows customer data 24 columns: customer_key Unique identifier customer geo_area_key Geographic area identifier start_dt Start date customer relationship end_dt End date customer relationship (applicable) continent Continent customer located gender Customer's gender title Customer's title (Mr., Mrs., Ms., etc.) given_name Customer's first name middle_initial Customer's middle initial surname Customer's last name street_address Customer's street address city City customer resides state State abbreviation state_full Full state name zip_code Postal/ZIP code country Country code country_full Full country name birthday Customer's date birth age Customer's age years occupation Customer's occupation profession company Company customer employed vehicle Customer's vehicle information latitude Geographic latitude customer's location longitude Geographic longitude customer's location","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/customer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Customer dataset — customer","text":"Internal customer database Generated fpaR::sales","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/date.html","id":null,"dir":"Reference","previous_headings":"","what":"Date Dimension Table — date","title":"Date Dimension Table — date","text":"dataset provides comprehensive date dimension table, including various calendar attributes year, quarter, month, day-related information.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date Dimension Table — date","text":"","code":"date"},{"path":"https://alejandrohagan.github.io/fpaR/reference/date.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Date Dimension Table — date","text":"data frame multiple rows 18 columns: date Date. actual calendar date. date_key integer. Unique identifier date (often used data warehouses). year integer. calendar year (e.g., 2024). year_quarter character. Year quarter combination (e.g., \"2024-Q1\"). year_quarter_number integer. Numeric representation year quarter (e.g., 202401 Q1 2024). quarter integer. quarter year (1 4). year_month character. Year month combination (e.g., \"2024-01\"). year_month_short character. Abbreviated year month (e.g., \"Jan 2024\"). year_month_number integer. Numeric representation year month (e.g., 202401 January 2024). month character. Full month name (e.g., \"January\"). month_short character. Abbreviated month name (e.g., \"Jan\"). month_number integer. Numeric representation month (1 12). dayof_week character. Full name day week (e.g., \"Monday\"). dayof_week_short character. Abbreviated day week (e.g., \"Mon\"). dayof_week_number integer. Numeric representation day week (1 Monday 7 Sunday). working_day logical. Indicates date working day (TRUE/FALSE). working_day_number integer. Sequential working day number within year.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/date.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Date Dimension Table — date","text":"Generated fpaR::date","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date Dimension Table — date","text":"","code":"if (FALSE) { # \\dontrun{ data(date) head(date) summary(date) } # }"},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period day over previous period day — dod","title":"Current period day over previous period day — dod","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period day over previous period day — dod","text":"","code":"dod(.data, .date, .value, calendar_type, lag_n = 1)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period day over previous period day — dod","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period day over previous period day — dod","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period day over previous period day — dod","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period day over previous period day — dod","text":"","code":"dod(sales,.date=order_date,.value=quantity,calendar_type='standard',lag_n=1) #>  #> ── Day over day ──────────────────────────────────────────────────────────────── #> Function: `dod` was executed #>  #> ── Description: ── #>  #> This creates a full day `sum()` of the previous day quantity and compares it #> with the full day `sum()` current day quantity from the start of the standard #> calendar day to the end of the day #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Day-over-day execution function — dod_fn","title":"Day-over-day execution function — dod_fn","text":"dod_fn() function called dod() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day-over-day execution function — dod_fn","text":"","code":"dod_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Day-over-day execution function — dod_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Day-over-day execution function — dod_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/dod_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Day-over-day execution function — dod_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/fx.html","id":null,"dir":"Reference","previous_headings":"","what":"Foreign Exchange Rates Dataset — fx","title":"Foreign Exchange Rates Dataset — fx","text":"dataset contains foreign exchange rates different currencies specific dates.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/fx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Foreign Exchange Rates Dataset — fx","text":"","code":"fx"},{"path":"https://alejandrohagan.github.io/fpaR/reference/fx.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Foreign Exchange Rates Dataset — fx","text":"data frame multiple rows 4 columns: date Date. date exchange rate recorded. from_currency character. source currency code (e.g., \"USD\"). to_currency character. target currency code (e.g., \"EUR\"). exchange numeric. exchange rate from_currency to_currency.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/fx.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Foreign Exchange Rates Dataset — fx","text":"Generated fpaR::fx","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/fx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Foreign Exchange Rates Dataset — fx","text":"","code":"if (FALSE) { # \\dontrun{ data(fx) head(fx) summary(fx) } # }"},{"path":"https://alejandrohagan.github.io/fpaR/reference/generate_cli_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate CLI actions — generate_cli_action","title":"Generate CLI actions — generate_cli_action","text":"Generate CLI actions","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/generate_cli_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate CLI actions — generate_cli_action","text":"","code":"generate_cli_action(x, word)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/generate_cli_action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate CLI actions — generate_cli_action","text":"x input test word key word validate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/generate_cli_action.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate CLI actions — generate_cli_action","text":"list","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/is_yyyy_mm_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an input is YYYY-MM-DD format — is_yyyy_mm_dd","title":"Validate an input is YYYY-MM-DD format — is_yyyy_mm_dd","text":"Validate input YYYY-MM-DD format","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/is_yyyy_mm_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an input is YYYY-MM-DD format — is_yyyy_mm_dd","text":"","code":"is_yyyy_mm_dd(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/is_yyyy_mm_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an input is YYYY-MM-DD format — is_yyyy_mm_dd","text":"x date column","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/is_yyyy_mm_dd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an input is YYYY-MM-DD format — is_yyyy_mm_dd","text":"logical","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/make_action_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Action field CLI args — make_action_cli","title":"Make Action field CLI args — make_action_cli","text":"Make Action field CLI args","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/make_action_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Action field CLI args — make_action_cli","text":"","code":"make_action_cli(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/make_action_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Action field CLI args — make_action_cli","text":"x action class","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/make_action_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Action field CLI args — make_action_cli","text":"list","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/make_db_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an in memory database from a table — make_db_tbl","title":"Make an in memory database from a table — make_db_tbl","text":"Make memory database table","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/make_db_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an in memory database from a table — make_db_tbl","text":"","code":"make_db_tbl(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/make_db_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an in memory database from a table — make_db_tbl","text":"x tibble dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/make_db_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an in memory database from a table — make_db_tbl","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom.html","id":null,"dir":"Reference","previous_headings":"","what":"Current full period month over previous full period month — mom","title":"Current full period month over previous full period month — mom","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current full period month over previous full period month — mom","text":"","code":"mom(.data, .date, .value, calendar_type, lag_n = 1)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current full period month over previous full period month — mom","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current full period month over previous full period month — mom","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current full period month over previous full period month — mom","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current full period month over previous full period month — mom","text":"","code":"mom(sales,.date=order_date,.value=quantity,calendar_type='standard',lag_n=1) #>  #> ── Month over month ──────────────────────────────────────────────────────────── #> Function: `mom` was executed #>  #> ── Description: ── #>  #> This creates a full month `sum()` of the previous month quantity and compares #> it with the full month `sum()` current month quantity from the start of the #> standard calendar month to the end of the month #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the month time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and month was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"month-over-month execution function — mom_fn","title":"month-over-month execution function — mom_fn","text":"mom_fn() function called mom() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"month-over-month execution function — mom_fn","text":"","code":"mom_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"month-over-month execution function — mom_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"month-over-month execution function — mom_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mom_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"month-over-month execution function — mom_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period month to date compared to previous period month-to-date — momtd","title":"Current period month to date compared to previous period month-to-date — momtd","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period month to date compared to previous period month-to-date — momtd","text":"","code":"momtd(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period month to date compared to previous period month-to-date — momtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period month to date compared to previous period month-to-date — momtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period month to date compared to previous period month-to-date — momtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period month to date compared to previous period month-to-date — momtd","text":"","code":"momtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\", lag_n=1) #>  #> ── Month-to-date over previous month-to-date ─────────────────────────────────── #> Function: `momtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the previous month quantity and compares it #> with the daily `cumsum()` current month quantity from the start of the standard #> calendar month to the end of the month #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and month was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Current year to date over previous year-to-date for tibble objects — momtd_fn","title":"Current year to date over previous year-to-date for tibble objects — momtd_fn","text":"momtd_fn() function called momtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current year to date over previous year-to-date for tibble objects — momtd_fn","text":"","code":"momtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current year to date over previous year-to-date for tibble objects — momtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current year to date over previous year-to-date for tibble objects — momtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/momtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current year to date over previous year-to-date for tibble objects — momtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period month-to-date — mtd","title":"Current period month-to-date — mtd","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period month-to-date — mtd","text":"","code":"mtd(.data, .date, .value, calendar_type)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period month-to-date — mtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period month-to-date — mtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period month-to-date — mtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period month-to-date — mtd","text":"","code":"mtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\") #>  #> ── Month-to-date ─────────────────────────────────────────────────────────────── #> Function: `mtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current month quantity from the start of #> the standard calendar month to the end of the month #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and month was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Month-to-date execution function — mtd_fn","title":"Month-to-date execution function — mtd_fn","text":"mtd_fn() function called mtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Month-to-date execution function — mtd_fn","text":"","code":"mtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Month-to-date execution function — mtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Month-to-date execution function — mtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Month-to-date execution function — mtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm.html","id":null,"dir":"Reference","previous_headings":"","what":"Current month-to-date over full previous period month — mtdopm","title":"Current month-to-date over full previous period month — mtdopm","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current month-to-date over full previous period month — mtdopm","text":"","code":"mtdopm(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current month-to-date over full previous period month — mtdopm","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current month-to-date over full previous period month — mtdopm","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current month-to-date over full previous period month — mtdopm","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current month-to-date over full previous period month — mtdopm","text":"","code":"mtdopm(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Month-to-date over full previous month ────────────────────────────────────── #> Function: `mtdopm` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current month quantity and compares it #> with the full month `sum()` previous month quantity from the start of the #> standard calendar month to the end of the month #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and month was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Month-over-month vs. prior full momth execution function — mtdopm_fn","title":"Month-over-month vs. prior full momth execution function — mtdopm_fn","text":"mtdopm_fn() function called mtdopm() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Month-over-month vs. prior full momth execution function — mtdopm_fn","text":"","code":"mtdopm_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Month-over-month vs. prior full momth execution function — mtdopm_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Month-over-month vs. prior full momth execution function — mtdopm_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/mtdopm_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Month-over-month vs. prior full momth execution function — mtdopm_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous period month-to-date — pmtd","title":"Previous period month-to-date — pmtd","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous period month-to-date — pmtd","text":"","code":"pmtd(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Previous period month-to-date — pmtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Previous period month-to-date — pmtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Previous period month-to-date — pmtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Previous period month-to-date — pmtd","text":"","code":"pmtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Previous month-to-date ────────────────────────────────────────────────────── #> Function: `pmtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the previous month quantity from the start #> of the standard calendar month to the end of the month #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and month was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous month-to-date execution function — pmtd_fn","title":"Previous month-to-date execution function — pmtd_fn","text":"pmtd_fn() function called pmtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous month-to-date execution function — pmtd_fn","text":"","code":"pmtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Previous month-to-date execution function — pmtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Previous month-to-date execution function — pmtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pmtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Previous month-to-date execution function — pmtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior period quarter-to-date — pqtd","title":"Prior period quarter-to-date — pqtd","text":"calculates quarterly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior period quarter-to-date — pqtd","text":"","code":"pqtd(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior period quarter-to-date — pqtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior period quarter-to-date — pqtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prior period quarter-to-date — pqtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior period quarter-to-date — pqtd","text":"","code":"pqtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Prior quarter-to-date ─────────────────────────────────────────────────────── #> Function: `pqtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the previous quarter quantity from the start #> of the standard calendar quarter to the end of the quarter #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and quarter was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous quarter-to-date for tibble objects — pqtd_fn","title":"Previous quarter-to-date for tibble objects — pqtd_fn","text":"pqtd_fn() function called pqtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous quarter-to-date for tibble objects — pqtd_fn","text":"","code":"pqtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Previous quarter-to-date for tibble objects — pqtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Previous quarter-to-date for tibble objects — pqtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pqtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Previous quarter-to-date for tibble objects — pqtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ti objects — print","title":"Print ti objects — print","text":"Print ti objects Print segment objects","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ti objects — print","text":"x segment object ...","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ti objects — print","text":"ti object segment object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ti objects — print","text":"","code":"x <- ytd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\") x #>  #> ── Year-to-date ──────────────────────────────────────────────────────────────── #> Function: `ytd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current year quantity from the start of #> the standard calendar year to the end of the year #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date and year was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_actions_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Print action steps — print_actions_steps","title":"Print action steps — print_actions_steps","text":"Print action steps","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_actions_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print action steps — print_actions_steps","text":"","code":"print_actions_steps(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_actions_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print action steps — print_actions_steps","text":"x S7 class","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_actions_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print action steps — print_actions_steps","text":"cli messages","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_fn_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints function header info — print_fn_info","title":"Prints function header info — print_fn_info","text":"Prints function header info","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_fn_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints function header info — print_fn_info","text":"","code":"print_fn_info(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_fn_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints function header info — print_fn_info","text":"x ti segment obj","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_fn_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints function header info — print_fn_info","text":"print","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_next_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints functions next steps — print_next_steps","title":"Prints functions next steps — print_next_steps","text":"Prints functions next steps","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_next_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints functions next steps — print_next_steps","text":"","code":"print_next_steps()"},{"path":"https://alejandrohagan.github.io/fpaR/reference/print_next_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints functions next steps — print_next_steps","text":"print","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/product.html","id":null,"dir":"Reference","previous_headings":"","what":"Product Master Dataset — product","title":"Product Master Dataset — product","text":"dataset contains detailed information products, including identifiers, attributes, pricing, categorization.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/product.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Product Master Dataset — product","text":"","code":"product"},{"path":"https://alejandrohagan.github.io/fpaR/reference/product.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Product Master Dataset — product","text":"data frame multiple rows 14 columns: product_key integer. Unique identifier product. product_code character. Internal SKU code product. product_name character. Name product. manufacturer character. Name product manufacturer. brand character. Brand associated product. color character. Color product. weight_unit character. Unit measurement weight (e.g., \"kg\", \"lb\"). weight numeric. Weight product specified units. cost numeric. Cost price product. price numeric. Selling price product. category_key integer. Unique identifier product category. category_name character. Name product category. sub_category_key integer. Unique identifier product sub-category. sub_category_name character. Name product sub-category.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/product.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Product Master Dataset — product","text":"Generated fpaR::product","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/product.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Product Master Dataset — product","text":"","code":"if (FALSE) { # \\dontrun{ data(product) head(product) summary(product) } # }"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous period week-to-date — pwtd","title":"Previous period week-to-date — pwtd","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous period week-to-date — pwtd","text":"","code":"pwtd(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Previous period week-to-date — pwtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Previous period week-to-date — pwtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Previous period week-to-date — pwtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Previous period week-to-date — pwtd","text":"","code":"pwtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Previous Week-to-date ─────────────────────────────────────────────────────── #> Function: `pwtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the previous week quantity from the start of #> the standard calendar week to the end of the week #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year, month and week was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous month-to-date for tibble objects — pwtd_fn","title":"Previous month-to-date for tibble objects — pwtd_fn","text":"pwtd_fn() function called pwtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous month-to-date for tibble objects — pwtd_fn","text":"","code":"pwtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Previous month-to-date for tibble objects — pwtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Previous month-to-date for tibble objects — pwtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pwtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Previous month-to-date for tibble objects — pwtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous period year-to-date — pytd","title":"Previous period year-to-date — pytd","text":"group, pytd()  create running annual sum value based calendar type previous year compared current year calendar date period exists, return NA function returns ti object prints summary steps actions take create calendar table calculations Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous period year-to-date — pytd","text":"","code":"pytd(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Previous period year-to-date — pytd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Previous period year-to-date — pytd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Previous period year-to-date — pytd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Previous period year-to-date — pytd","text":"","code":"pytd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Previous year-to-date ─────────────────────────────────────────────────────── #> Function: `pytd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the previous year quantity from the start of #> the standard calendar year to the end of the year #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date and year was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous year-to-date execution function — pytd_fn","title":"Previous year-to-date execution function — pytd_fn","text":"pytd_fn() function called pytd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous year-to-date execution function — pytd_fn","text":"","code":"pytd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Previous year-to-date execution function — pytd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Previous year-to-date execution function — pytd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/pytd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Previous year-to-date execution function — pytd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq.html","id":null,"dir":"Reference","previous_headings":"","what":"Current full period quarter over previous full period quarter — qoq","title":"Current full period quarter over previous full period quarter — qoq","text":"short description...","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current full period quarter over previous full period quarter — qoq","text":"","code":"qoq(.data, .date, .value, calendar_type, lag_n = 1)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current full period quarter over previous full period quarter — qoq","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current full period quarter over previous full period quarter — qoq","text":"ti object","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current full period quarter over previous full period quarter — qoq","text":"","code":"qoq(sales,.date=order_date,.value=quantity,calendar_type='standard',lag_n=1) #>  #> ── Quarter over quarter ──────────────────────────────────────────────────────── #> Function: `qoq` was executed #>  #> ── Description: ── #>  #> This creates a full quarter `sum()` of the previous quarter quantity and #> compares it with the full quarter `sum()` current quarter quantity from the #> start of the standard calendar quarter to the end of the quarter #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the quarter time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and quarter was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarter-over-quarter execution function — qoq_fn","title":"Quarter-over-quarter execution function — qoq_fn","text":"qoq_fn() function called qoq() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarter-over-quarter execution function — qoq_fn","text":"","code":"qoq_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quarter-over-quarter execution function — qoq_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quarter-over-quarter execution function — qoq_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoq_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarter-over-quarter execution function — qoq_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period quarter-to-date compared to previous period quarter-to-date — qoqtd","title":"Current period quarter-to-date compared to previous period quarter-to-date — qoqtd","text":"calculates annual cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period quarter-to-date compared to previous period quarter-to-date — qoqtd","text":"","code":"qoqtd(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period quarter-to-date compared to previous period quarter-to-date — qoqtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period quarter-to-date compared to previous period quarter-to-date — qoqtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period quarter-to-date compared to previous period quarter-to-date — qoqtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period quarter-to-date compared to previous period quarter-to-date — qoqtd","text":"","code":"qoqtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Current period quarter-to-date compared to previous period quarter-to-date ── #> Function: `qoqtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the previous quarter quantity and compares #> it with the daily `cumsum()` current quarter quantity from the start of the #> standard calendar quarter to the end of the quarter #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and quarter was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Current quarter to date over previous quarter-to-date for tibble objects — qoqtd_fn","title":"Current quarter to date over previous quarter-to-date for tibble objects — qoqtd_fn","text":"qoqtd_fn() function called qoqtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current quarter to date over previous quarter-to-date for tibble objects — qoqtd_fn","text":"","code":"qoqtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current quarter to date over previous quarter-to-date for tibble objects — qoqtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current quarter to date over previous quarter-to-date for tibble objects — qoqtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qoqtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current quarter to date over previous quarter-to-date for tibble objects — qoqtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period quarter-to-date — qtd","title":"Current period quarter-to-date — qtd","text":"calculates full year value compared previous year value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period quarter-to-date — qtd","text":"","code":"qtd(.data, .date, .value, calendar_type)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period quarter-to-date — qtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period quarter-to-date — qtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period quarter-to-date — qtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period quarter-to-date — qtd","text":"","code":"qtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\") #>  #> ── Quarter-to-date ───────────────────────────────────────────────────────────── #> Function: `qtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current quarter quantity from the start #> of the standard calendar quarter to the end of the quarter #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column year and quarter was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarter-to-date execution function — qtd_fn","title":"Quarter-to-date execution function — qtd_fn","text":"qtd_fn() function called qtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarter-to-date execution function — qtd_fn","text":"","code":"qtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quarter-to-date execution function — qtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quarter-to-date execution function — qtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarter-to-date execution function — qtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period quarter-to-date over previous period quarter — qtdopq","title":"Current period quarter-to-date over previous period quarter — qtdopq","text":"short description...","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period quarter-to-date over previous period quarter — qtdopq","text":"","code":"qtdopq(.data, .date, .value, calendar_type, lag_n = 1)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period quarter-to-date over previous period quarter — qtdopq","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period quarter-to-date over previous period quarter — qtdopq","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period quarter-to-date over previous period quarter — qtdopq","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period quarter-to-date over previous period quarter — qtdopq","text":"","code":"qtdopq(sales,.date=order_date,.value=quantity,calendar_type='standard',lag_n=1) #>  #> ── Quarter-to-date over full previous quarter ────────────────────────────────── #> Function: `qtdopq` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current quarter quantity and compares it #> with the full quarter `sum()` previous quarter quantity from the start of the #> standard calendar quarter to the end of the quarter #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year and quarter was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"quarter-to-date over previous quarter execution function — qtdopq_fn","title":"quarter-to-date over previous quarter execution function — qtdopq_fn","text":"qtdopq_fn() function called qtdopq() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quarter-to-date over previous quarter execution function — qtdopq_fn","text":"","code":"qtdopq_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"quarter-to-date over previous quarter execution function — qtdopq_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"quarter-to-date over previous quarter execution function — qtdopq_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/qtdopq_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"quarter-to-date over previous quarter execution function — qtdopq_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/sales.html","id":null,"dir":"Reference","previous_headings":"","what":"Sales Transactions Dataset — sales","title":"Sales Transactions Dataset — sales","text":"dataset contains sales transaction data, including order details, customer information, pricing, revenue metrics.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/sales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sales Transactions Dataset — sales","text":"","code":"sales"},{"path":"https://alejandrohagan.github.io/fpaR/reference/sales.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sales Transactions Dataset — sales","text":"data frame multiple rows 17 columns: order_key integer. Unique identifier order. line_number integer. Line number within order, representing individual items. order_date Date. Date order placed. delivery_date Date. Date order delivered. customer_key integer. Unique identifier customer. store_key integer. Unique identifier store transaction occurred. product_key integer. Unique identifier product. quantity numeric. Number units sold transaction. unit_price numeric. Price per unit product original currency. net_price numeric. Final price per unit discounts. unit_cost numeric. Cost per unit product. currency_code character. Currency code (e.g., \"USD\", \"EUR\"). exchange_rate numeric. Exchange rate applied transaction currency. gross_revenue numeric. Total revenue deductions. net_revenue numeric. Revenue deductions discounts taxes. cogs numeric. Cost goods sold (COGS). margin numeric. Profit margin calculated net_revenue - cogs.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/sales.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sales Transactions Dataset — sales","text":"Generated fpaR::sales","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/sales.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sales Transactions Dataset — sales","text":"","code":"data(sales) head(sales) #> # A tibble: 6 × 17 #>   order_key line_number order_date delivery_date customer_key store_key #>       <dbl>       <dbl> <date>     <date>               <dbl>     <dbl> #> 1    233000           0 2021-05-18 2021-05-18         1855811       585 #> 2    233100           0 2021-05-19 2021-05-19         1345436       550 #> 3    233100           1 2021-05-19 2021-05-19         1345436       550 #> 4    233100           2 2021-05-19 2021-05-19         1345436       550 #> 5    233200           0 2021-05-20 2021-05-20          926315       370 #> 6    233200           1 2021-05-20 2021-05-20          926315       370 #> # ℹ 11 more variables: product_key <dbl>, quantity <dbl>, unit_price <dbl>, #> #   net_price <dbl>, unit_cost <dbl>, currency_code <chr>, exchange_rate <dbl>, #> #   gross_revenue <dbl>, net_revenue <dbl>, cogs <dbl>, margin <dbl> summary(sales) #>    order_key       line_number      order_date         delivery_date        #>  Min.   :233000   Min.   :0.000   Min.   :2021-05-18   Min.   :2021-05-18   #>  1st Qu.:268901   1st Qu.:0.000   1st Qu.:2022-05-12   1st Qu.:2022-05-12   #>  Median :287603   Median :1.000   Median :2022-11-15   Median :2022-11-17   #>  Mean   :288707   Mean   :1.173   Mean   :2022-11-26   Mean   :2022-11-27   #>  3rd Qu.:311000   3rd Qu.:2.000   3rd Qu.:2023-07-07   3rd Qu.:2023-07-08   #>  Max.   :339801   Max.   :6.000   Max.   :2024-04-20   Max.   :2024-04-23   #>   customer_key       store_key       product_key      quantity      #>  Min.   :   1401   Min.   :    10   Min.   :   1   Min.   : 1.000   #>  1st Qu.: 539021   1st Qu.:   450   1st Qu.: 504   1st Qu.: 1.000   #>  Median :1224765   Median :999999   Median :1446   Median : 2.000   #>  Mean   :1122913   Mean   :538154   Mean   :1214   Mean   : 3.147   #>  3rd Qu.:1669633   3rd Qu.:999999   3rd Qu.:1642   3rd Qu.: 4.000   #>  Max.   :2099336   Max.   :999999   Max.   :2517   Max.   :10.000   #>    unit_price        net_price          unit_cost       currency_code      #>  Min.   :   0.95   Min.   :   0.855   Min.   :   0.48   Length:7794        #>  1st Qu.:  47.95   1st Qu.:  46.008   1st Qu.:  22.05   Class :character   #>  Median : 208.50   Median : 197.800   Median :  86.91   Mode  :character   #>  Mean   : 311.36   Mean   : 292.896   Mean   : 128.42                      #>  3rd Qu.: 369.00   3rd Qu.: 342.015   3rd Qu.: 164.18                      #>  Max.   :3748.50   Max.   :3748.500   Max.   :1241.95                      #>  exchange_rate    gross_revenue      net_revenue            cogs         #>  Min.   :0.7056   Min.   :    1.9   Min.   :    1.71   Min.   :   0.96   #>  1st Qu.:0.9461   1st Qu.:  115.8   1st Qu.:  107.74   1st Qu.:  52.00   #>  Median :1.0000   Median :  409.3   Median :  387.00   Median : 183.88   #>  Mean   :1.0284   Mean   :  997.1   Mean   :  937.38   Mean   : 411.63   #>  3rd Qu.:1.0000   3rd Qu.: 1136.2   3rd Qu.: 1064.14   3rd Qu.: 490.76   #>  Max.   :1.6080   Max.   :29988.0   Max.   :25789.68   Max.   :9935.64   #>      margin          #>  Min.   :7.213e-01   #>  1st Qu.:5.280e+01   #>  Median :1.990e+02   #>  Mean   :5.258e+02   #>  3rd Qu.:5.613e+02   #>  Max.   :1.622e+04"},{"path":"https://alejandrohagan.github.io/fpaR/reference/seq_date_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a calendar table in sql — seq_date_sql","title":"Create a calendar table in sql — seq_date_sql","text":"Create calendar table sql","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/seq_date_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a calendar table in sql — seq_date_sql","text":"","code":"seq_date_sql(start_date, end_date, time_unit, con)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/seq_date_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a calendar table in sql — seq_date_sql","text":"start_date calendar start date YYYY-MM-DD format end_date calendar end date YYYY-MM-DD format time_unit calendar table unit 'day', 'week', 'month', 'quarter' 'year' con database connection","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/seq_date_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a calendar table in sql — seq_date_sql","text":"DBI object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/seq_date_sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a calendar table in sql — seq_date_sql","text":"","code":"con <- DBI::dbConnect(drv = duckdb::duckdb()) seq_date_sql(start_date = \"2015-01-01\", end_date = \"2024-04-20\", time_unit = \"day\", con = con) #> # Source:   SQL [?? x 1] #> # Database: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1/:memory:] #>    date       #>    <date>     #>  1 2015-01-01 #>  2 2015-01-02 #>  3 2015-01-03 #>  4 2015-01-04 #>  5 2015-01-05 #>  6 2015-01-06 #>  7 2015-01-07 #>  8 2015-01-08 #>  9 2015-01-09 #> 10 2015-01-10 #> # ℹ more rows"},{"path":"https://alejandrohagan.github.io/fpaR/reference/store.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Master Dataset — store","title":"Store Master Dataset — store","text":"dataset contains information stores, including identifiers, geographic details, operational status, physical attributes.","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/store.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Master Dataset — store","text":"","code":"store"},{"path":"https://alejandrohagan.github.io/fpaR/reference/store.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Store Master Dataset — store","text":"data frame multiple rows 11 columns: store_key integer. Unique identifier store. store_code character. Internal code assigned store. geo_area_key integer. Unique identifier geographic area. country_code character. ISO country code (e.g., \"US\", \"DE\"). country_name character. Full name country store located. state character. State region store located. open_date Date. Date store opened. close_date Date. Date store closed (applicable). description character. Additional details notes store. square_meters numeric. Store size square meters. status character. Current operational status store (e.g., \"Open\", \"Closed\").","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/store.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Store Master Dataset — store","text":"Generated fpaR::store","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/store.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Master Dataset — store","text":"","code":"if (FALSE) { # \\dontrun{ data(store) head(store) summary(store) } # }"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow.html","id":null,"dir":"Reference","previous_headings":"","what":"Current full period week over full previous period week — wow","title":"Current full period week over full previous period week — wow","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current full period week over full previous period week — wow","text":"","code":"wow(.data, .date, .value, calendar_type, lag_n = 1)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current full period week over full previous period week — wow","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current full period week over full previous period week — wow","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current full period week over full previous period week — wow","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current full period week over full previous period week — wow","text":"","code":"wow(sales,.date=order_date,.value=quantity,calendar_type='standard',lag_n=1) #>  #> ── week over week ────────────────────────────────────────────────────────────── #> Function: `wow` was executed #>  #> ── Description: ── #>  #> This creates a full week `sum()` of the previous week quantity and compares it #> with the full week `sum()` current week quantity from the start of the standard #> calendar week to the end of the week #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the week time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, week, year and month was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Week-over-week execution function — wow_fn","title":"Week-over-week execution function — wow_fn","text":"wow_fn() function called wow() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Week-over-week execution function — wow_fn","text":"","code":"wow_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Week-over-week execution function — wow_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Week-over-week execution function — wow_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wow_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Week-over-week execution function — wow_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period Wwek-to-date over previous period week-to-date — wowtd","title":"Current period Wwek-to-date over previous period week-to-date — wowtd","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period Wwek-to-date over previous period week-to-date — wowtd","text":"","code":"wowtd(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period Wwek-to-date over previous period week-to-date — wowtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period Wwek-to-date over previous period week-to-date — wowtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period Wwek-to-date over previous period week-to-date — wowtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period Wwek-to-date over previous period week-to-date — wowtd","text":"","code":"wowtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Week-to-date over previous week-to-date ───────────────────────────────────── #> Function: `wowtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the previous week quantity and compares it #> with the daily `cumsum()` current week quantity from the start of the standard #> calendar week to the end of the week #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year, month and week was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Current year to date over previous year-to-date for tibble objects — wowtd_fn","title":"Current year to date over previous year-to-date for tibble objects — wowtd_fn","text":"wowtd_fn() function called wowtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current year to date over previous year-to-date for tibble objects — wowtd_fn","text":"","code":"wowtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current year to date over previous year-to-date for tibble objects — wowtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current year to date over previous year-to-date for tibble objects — wowtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wowtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current year to date over previous year-to-date for tibble objects — wowtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period week-to-date — wtd","title":"Current period week-to-date — wtd","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period week-to-date — wtd","text":"","code":"wtd(.data, .date, .value, calendar_type)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period week-to-date — wtd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period week-to-date — wtd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period week-to-date — wtd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period week-to-date — wtd","text":"","code":"wtd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\") #>  #> ── Week-to-date ──────────────────────────────────────────────────────────────── #> Function: `wtd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current week quantity from the start of #> the standard calendar week to the end of the week #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year, month and week was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Week-to-date execution fucntion — wtd_fn","title":"Week-to-date execution fucntion — wtd_fn","text":"wtd_fn() function called wtd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Week-to-date execution fucntion — wtd_fn","text":"","code":"wtd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Week-to-date execution fucntion — wtd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Week-to-date execution fucntion — wtd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Week-to-date execution fucntion — wtd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period week-to-date over full previous period week — wtdopw","title":"Current period week-to-date over full previous period week — wtdopw","text":"calculates monthly cumulative sum targeted value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period week-to-date over full previous period week — wtdopw","text":"","code":"wtdopw(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period week-to-date over full previous period week — wtdopw","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period week-to-date over full previous period week — wtdopw","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period week-to-date over full previous period week — wtdopw","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period week-to-date over full previous period week — wtdopw","text":"","code":"wtdopw(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Week-to-date over full previous week ──────────────────────────────────────── #> Function: `wtdopw` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current week quantity and compares it #> with the full week `sum()` previous week quantity from the start of the #> standard calendar week to the end of the week #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date, year, month and week was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Year-over-year — wtdopw_fn","title":"Year-over-year — wtdopw_fn","text":"wtdopw_fn() function called wtdopw() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year-over-year — wtdopw_fn","text":"","code":"wtdopw_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year-over-year — wtdopw_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year-over-year — wtdopw_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/wtdopw_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Year-over-year — wtdopw_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy.html","id":null,"dir":"Reference","previous_headings":"","what":"Current full period year over previous full period year — yoy","title":"Current full period year over previous full period year — yoy","text":"calculates full year value compared previous year value respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current full period year over previous full period year — yoy","text":"","code":"yoy(.data, .date, .value, calendar_type, lag_n = 1)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current full period year over previous full period year — yoy","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current full period year over previous full period year — yoy","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current full period year over previous full period year — yoy","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current full period year over previous full period year — yoy","text":"","code":"yoy(sales,.date=order_date,.value=quantity,calendar_type='standard',lag_n=1) #>  #> ── Year over year ────────────────────────────────────────────────────────────── #> Function: `yoy` was executed #>  #> ── Description: ── #>  #> This creates a full year `sum()` of the previous year quantity and compares it #> with the full year `sum()` current year quantity from the start of the standard #> calendar year to the end of the year #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the year time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date and year was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Current year-to-date over previous period year-to-date eeecution function — yoy_fn","title":"Current year-to-date over previous period year-to-date eeecution function — yoy_fn","text":"yoy_fn() function called yoy() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current year-to-date over previous period year-to-date eeecution function — yoy_fn","text":"","code":"yoy_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current year-to-date over previous period year-to-date eeecution function — yoy_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current year-to-date over previous period year-to-date eeecution function — yoy_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoy_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current year-to-date over previous period year-to-date eeecution function — yoy_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period year-to-date compared to previous period year-to-date — yoytd","title":"Current period year-to-date compared to previous period year-to-date — yoytd","text":"calculates annual cumulative sum targeted value compares previous period's annual cumulative date sum using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period year-to-date compared to previous period year-to-date — yoytd","text":"","code":"yoytd(.data, .date, .value, calendar_type, lag_n)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period year-to-date compared to previous period year-to-date — yoytd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period year-to-date compared to previous period year-to-date — yoytd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period year-to-date compared to previous period year-to-date — yoytd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period year-to-date compared to previous period year-to-date — yoytd","text":"","code":"yoytd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\",lag_n=1) #>  #> ── Year-to-date over previous year-to-date ───────────────────────────────────── #> Function: `yoytd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the previous year quantity and compares it #> with the daily `cumsum()` current year quantity from the start of the standard #> calendar year to the end of the year #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date and year was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Current year to date over previous year-to-date exection function — yoytd_fn","title":"Current year to date over previous year-to-date exection function — yoytd_fn","text":"yoytd_fn() function called yoytd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current year to date over previous year-to-date exection function — yoytd_fn","text":"","code":"yoytd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current year to date over previous year-to-date exection function — yoytd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current year to date over previous year-to-date exection function — yoytd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/yoytd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current year to date over previous year-to-date exection function — yoytd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period year-to-date — ytd","title":"Current period year-to-date — ytd","text":"group, ytd()  create running annual sum value based calendar type specified function returns ti object prints summary steps actions take create calendar table calculations Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period year-to-date — ytd","text":"","code":"ytd(.data, .date, .value, calendar_type)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period year-to-date — ytd","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period year-to-date — ytd","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period year-to-date — ytd","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period year-to-date — ytd","text":"","code":"ytd(sales,.date=order_date,.value=quantity,calendar_type=\"standard\") #>  #> ── Year-to-date ──────────────────────────────────────────────────────────────── #> Function: `ytd` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current year quantity from the start of #> the standard calendar year to the end of the year #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date and year was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Year-to-date execution function — ytd_fn","title":"Year-to-date execution function — ytd_fn","text":"ytd_fn() function called ytd() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year-to-date execution function — ytd_fn","text":"","code":"ytd_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year-to-date execution function — ytd_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year-to-date execution function — ytd_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytd_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Year-to-date execution function — ytd_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object dplyr::collect()","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Current period year-to-date compared to full previous period — ytdopy","title":"Current period year-to-date compared to full previous period — ytdopy","text":"calculates full year value compared previous year value using standard 5-5-4 calendar respecting groups passed dplyr::group_by() Use calculate return results","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current period year-to-date compared to full previous period — ytdopy","text":"","code":"ytdopy(.data, .date, .value, calendar_type, lag_n = 1)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current period year-to-date compared to full previous period — ytdopy","text":".data tibble dbi object (either grouped ungrouped) .date date column group .value value column summarize calendar_type select either 'standard' '5-5-4' calendar, see 'Details' additional information lag_n number periods lag","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current period year-to-date compared to full previous period — ytdopy","text":"ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current period year-to-date compared to full previous period — ytdopy","text":"function creates complete calendar object fills missing days, weeks, months, quarters, years provide grouped object dplyr::group_by(), generate complete calendar group function creates ti object, pre-processes data arguments downstream functions standard calendar standard calendar splits year 12 months (28–31 days ) uses 7-day week automatically accounts leap years every four years match Gregorian calendar 5-5-4 calendar 5-5-4 calendar divides fiscal year 52 weeks (occasionally 53), organizing quarter two 5-week periods one 4-week period. system commonly used retail financial reporting","code":""},{"path":[]},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current period year-to-date compared to full previous period — ytdopy","text":"","code":"ytdopy(sales,.date=order_date,.value=quantity,calendar_type='standard',lag_n=1) #>  #> ── Year-to-date over full previous year ──────────────────────────────────────── #> Function: `ytdopy` was executed #>  #> ── Description: ── #>  #> This creates a daily `cumsum()` of the current year quantity and compares it #> with the full year `sum()` previous year quantity from the start of the #> standard calendar year to the end of the year #>  #> ── Calendar: ── #>  #> • The calendar aggregated order_date to the day time unit #> • A standard calendar is created with 0 groups #> • Calendar ranges from 2021-05-18 to 2024-04-20 #> • 222 days were missing and replaced with 0 #> • New date column date and year was created from order_date #>  #> ── Actions: ── #>  #> Error in str_detect(x@action@value[[1]], \"32m\"): could not find function \"str_detect\""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Year-to-date over full prior period year — ytdopy_fn","title":"Year-to-date over full prior period year — ytdopy_fn","text":"ytdopy_fn() function called ytdopy() passed calculate","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year-to-date over full prior period year — ytdopy_fn","text":"","code":"ytdopy_fn(x)"},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year-to-date over full prior period year — ytdopy_fn","text":"x ti object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year-to-date over full prior period year — ytdopy_fn","text":"dbi object","code":""},{"path":"https://alejandrohagan.github.io/fpaR/reference/ytdopy_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Year-to-date over full prior period year — ytdopy_fn","text":"internal non exported function nested ti class called upon underlying function called calculate return dbi object can converted tibble object withdplyr::collect()","code":""},{"path":[]}]
